{"version":1,"kind":"Notebook","sha256":"24b0b8339b9a717843819956884407a2e8783202ba5ad6a371c734486d7b2ab2","slug":"blog.2022.pint-xarray","location":"/blog/2022/pint-xarray.md","dependencies":[],"frontmatter":{"title":"Unit-aware arithmetic in Xarray, via pint","description":"All scientific computations involve units, so let's make our analysis software aware of them.\n","tags":["code","python","xarray","pint","open-science","physical-units"],"date":"2022-08-30","kernelspec":{"name":"python3","display_name":"Python 3"},"authors":[{"id":"tom","nameParsed":{"literal":"Tom Nicholas","given":"Tom","family":"Nicholas"},"name":"Tom Nicholas","orcid":"0000-0002-2176-0530","github":"TomNicholas","url":"https://tom-nicholas.com"}],"github":"https://github.com/TomNicholas/tomnicholas.github.io","abbreviations":{"LF":"The Linux Foundation","JF":"The Jupyter Foundation","JEC":"Jupyter Executive Council","JFB":"The Jupyter Foundation Board","SSC":"Software Steering Council","OSPO":"Open Source Program Office"},"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/TomNicholas/tomnicholas.github.io/blob/main/blog/2022/pint-xarray.md","thumbnail":"/build/df49524368335f9010ca432f9849200d.jpeg","exports":[{"format":"md","filename":"pint-xarray.md","url":"/build/pint-xarray-8aefb9c49437de0bf64b87ce22e131a3.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"(This post was originally published on the ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"gNUMMUsPRr"},{"type":"link","url":"https://xarray.dev/blog/introducing-pint-xarray","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"xarray blog","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"R4cdP10OgI"}],"urlSource":"https://xarray.dev/blog/introducing-pint-xarray","key":"qnujPOC4hW"},{"type":"text","value":".)","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"oz3ZzkPiMm"}],"key":"ILrwfmCAob"},{"type":"paragraph","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"TLDR: Pint-Xarray supports unit-aware operations by wrapping ","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"vWrEzicrjJ"},{"type":"link","url":"https://pint.readthedocs.io/en/stable/","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"pint arrays","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"JJ4Zm0hZo8"}],"urlSource":"https://pint.readthedocs.io/en/stable/","key":"uo47AN8Uct"},{"type":"text","value":", so your code can automatically track the physical units that your data represents:","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"msjJwd5ls3"}],"key":"sM8GD6VjaO"}],"key":"QRGBUhOAov"},{"type":"code","lang":"python","value":"distance = xr.DataArray(10).pint.quantify(\"metres\")\ntime = xr.DataArray(4).pint.quantify(\"seconds\")\n\ndistance / time","position":{"start":{"line":22,"column":1},"end":{"line":27,"column":1}},"key":"SY94B5EIhL"},{"type":"code","lang":"","value":"Out:\n<xarray.DataArray ()>\n<Quantity(2.5, 'meter / second')>","position":{"start":{"line":29,"column":1},"end":{"line":33,"column":1}},"key":"DGOTIanfXT"},{"type":"heading","depth":2,"position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"text","value":"Units are integral to science","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"F1RZDHz5iV"}],"identifier":"units-are-integral-to-science","label":"Units are integral to science","html_id":"units-are-integral-to-science","implicit":true,"key":"LsBDQJIEYr"},{"type":"paragraph","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"text","value":"All quantities in science have units, whether explicitly or implicitly. (And even dimensionless quantities like ratios still technically have units.)","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"fCsk2nq6No"}],"key":"Gr2Dbxf43v"},{"type":"paragraph","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"children":[{"type":"text","value":"Getting our units right is finicky, and can very easily go unnoticed in our code.","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"iEH18Tgx8O"}],"key":"DmRVihGrSE"},{"type":"paragraph","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"text","value":"Even worse, the consequences of getting units wrong can be huge!","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"ydnT7xAlc6"}],"key":"LviHwQF5ed"},{"type":"paragraph","position":{"start":{"line":43,"column":1},"end":{"line":44,"column":1}},"children":[{"type":"text","value":"The most famous example of a units error has to be NASA’s $125 million ","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"XIYklURQMH"},{"type":"link","url":"https://www.simscale.com/blog/2017/12/nasa-mars-climate-orbiter-metric/","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"children":[{"type":"text","value":"Mars Climate Orbiter","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"gh2hjUacpP"}],"urlSource":"https://www.simscale.com/blog/2017/12/nasa-mars-climate-orbiter-metric/","key":"MgXFFS1n9f"},{"type":"text","value":", which in 1999 burned up in the Martian atmosphere instead of successfully entering orbit around Mars.\nA trajectory course correction had gone wrong, and the error was eventually traced back to a units mismatch: the engineers at Lockheed Martin expressed impulse in ","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"NDAfQCOem8"},{"type":"link","url":"https://en.wikipedia.org/wiki/Pound_(force)","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"children":[{"type":"text","value":"pound-force","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"V0ARjgNMH1"}],"urlSource":"https://en.wikipedia.org/wiki/Pound_(force)","data":{"page":"Pound_(force)","wiki":"https://en.wikipedia.org/","lang":"en"},"internal":false,"protocol":"wiki","key":"dqdaWtmU4w"},{"type":"text","value":" seconds, whereas the engineers at JPL assumed the impulse value their part of the software received was in SI newton seconds.","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"YzlssF74ho"}],"key":"PvT7Nkh475"},{"type":"paragraph","children":[{"type":"image","url":"/build/df49524368335f9010ca432f9849200d.jpeg","key":"F4odqOUyRh","urlSource":"https://web.archive.org/web/20191116161743/https://clqtg10snjb14i85u49wifbv-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Customers.jpg"}],"key":"m5uQyejdQg"},{"type":"paragraph","children":[{"type":"text","value":"Newspaper cartoon depicting the incongruence in the units used by NASA and Lockheed Martin scientists that led to the Mars Climate Orbiter disaster.","key":"nwAcsEBL5w"}],"key":"Rviasuso3J"},{"type":"paragraph","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"children":[{"type":"text","value":"We should take stories like this seriously: If we can automatically track units we can potentially eliminate a whole class of possible errors in our scientific work...","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"Lf4q6Jg9kE"}],"key":"cGWTlXsXRC"},{"type":"heading","depth":2,"position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"children":[{"type":"text","value":"Pint tracks units","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"h1Ye1xyco7"}],"identifier":"pint-tracks-units","label":"Pint tracks units","html_id":"pint-tracks-units","implicit":true,"key":"ibNRfMz422"},{"type":"paragraph","position":{"start":{"line":59,"column":1},"end":{"line":60,"column":1}},"children":[{"type":"text","value":"There are a few packages for handling units in python (notably ","position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"key":"moUfAm7Mvy"},{"type":"link","url":"https://github.com/yt-project/unyt","position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"children":[{"type":"text","value":"unyt","position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"key":"hZ5sDoiG7q"}],"urlSource":"https://github.com/yt-project/unyt","error":true,"key":"I5XYQqdQ93"},{"type":"text","value":" and ","position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"key":"YkxbJJRcrs"},{"type":"link","url":"https://docs.astropy.org/en/stable/units/","position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"children":[{"type":"text","value":"astropy.units","position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"key":"P3UB442vik"}],"urlSource":"https://docs.astropy.org/en/stable/units/","key":"hvjW3eDvmi"},{"type":"text","value":"), but for technical reasons we began units integration in Xarray with ","position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"key":"bv44JWIrWG"},{"type":"link","url":"https://pint.readthedocs.io/en/stable/","position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"children":[{"type":"text","value":"pint","position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"key":"trVWP5W8SZ"}],"urlSource":"https://pint.readthedocs.io/en/stable/","key":"gwXrOgOZZs"},{"type":"text","value":".\nThese various packages work by providing a numerical array type that acts similarly to a NumPy array, and is intended to plug in and replace the raw NumPy array (a so-called “duck array type”).","position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"key":"OtesJm8tku"}],"key":"DmOMUflrSq"},{"type":"paragraph","position":{"start":{"line":62,"column":1},"end":{"line":62,"column":1}},"children":[{"type":"text","value":"Pint provides the ","position":{"start":{"line":62,"column":1},"end":{"line":62,"column":1}},"key":"fHbNZTf2FN"},{"type":"inlineCode","value":"Quantity","position":{"start":{"line":62,"column":1},"end":{"line":62,"column":1}},"key":"iZ9Uj6m0S4"},{"type":"text","value":" object, which is a normal numpy array combined with a ","position":{"start":{"line":62,"column":1},"end":{"line":62,"column":1}},"key":"bRjmZl9Tir"},{"type":"inlineCode","value":"pint.Unit","position":{"start":{"line":62,"column":1},"end":{"line":62,"column":1}},"key":"jmjJHTqkkR"},{"type":"text","value":":","position":{"start":{"line":62,"column":1},"end":{"line":62,"column":1}},"key":"T8lWTwngdO"}],"key":"uCxoqRKPSY"},{"type":"code","lang":"python","value":"q = np.array([6, 7]) * pint.Unit('metres')\nprint(repr(q))","position":{"start":{"line":64,"column":1},"end":{"line":67,"column":1}},"key":"w6AozP7tTC"},{"type":"code","lang":"","value":"Out:\n<Quantity([6 7], 'meter')>","position":{"start":{"line":69,"column":1},"end":{"line":72,"column":1}},"key":"Q22sezlVyX"},{"type":"paragraph","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"children":[{"type":"text","value":"Pint Quantities act like NumPy arrays, except that the units are carried around with the arrays, propagated through operations, and checked during operations involving multiple quantities.","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"eXkwXXLsGf"}],"key":"Hg9wT5tkE5"},{"type":"heading","depth":2,"position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"children":[{"type":"text","value":"Xarray now wraps Pint","position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"key":"KC9bCinW4Y"}],"identifier":"xarray-now-wraps-pint","label":"Xarray now wraps Pint","html_id":"xarray-now-wraps-pint","implicit":true,"key":"w9aroDPfXh"},{"type":"paragraph","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"children":[{"type":"text","value":"Thanks to the ","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"ABOJzPFBOR"},{"type":"link","url":"https://github.com/pydata/xarray/issues/3594","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"children":[{"type":"text","value":"tireless work","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"iFRhjD4LfP"}],"urlSource":"https://github.com/pydata/xarray/issues/3594","data":{"kind":"issue","org":"pydata","repo":"xarray","issue_number":"3594"},"internal":false,"protocol":"github","key":"a8xgCwQzBz"},{"type":"text","value":" of Xarray core developer ","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"IPfoET6kon"},{"type":"link","url":"https://github.com/keewis","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"children":[{"type":"text","value":"Justus Magin","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"WKX71UaC64"}],"urlSource":"https://github.com/keewis","error":true,"key":"hc6IL84YSj"},{"type":"text","value":", you can now enjoy this automatic unit-handling in Xarray!","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"IgYv8DWL5F"}],"key":"pY4grRqRon"},{"type":"paragraph","position":{"start":{"line":80,"column":1},"end":{"line":81,"column":1}},"children":[{"type":"text","value":"Once you create a unit-aware Xarray object (see below for how) you can see the units of the data variables displayed as part of the printable representation.\nYou also immediately get the key benefits of Pint:","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"dO8kF0lhim"}],"key":"HOJ2dCA3lD"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":83,"column":1},"end":{"line":125,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":83,"column":1},"end":{"line":97,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"children":[{"type":"text","value":"Units are propagated through arithmetic, and new quantities are built using the units of the inputs:","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"Ay6vYByntm"}],"key":"lh4xs5BlWx"},{"type":"code","lang":"python","value":"distance = xr.DataArray(10).pint.quantify(\"metres\")\ntime = xr.DataArray(4).pint.quantify(\"seconds\")\n\ndistance / time","position":{"start":{"line":85,"column":1},"end":{"line":90,"column":1}},"key":"KdctmGdzlD"},{"type":"code","lang":"","value":"Out:\n<xarray.DataArray ()>\n<Quantity(2.5, 'meter / second')>","position":{"start":{"line":92,"column":1},"end":{"line":96,"column":1}},"key":"e1P0mchdRm"}],"key":"SaodvlCRYe"},{"type":"listItem","spread":true,"position":{"start":{"line":98,"column":1},"end":{"line":111,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":98,"column":1},"end":{"line":98,"column":1}},"children":[{"type":"text","value":"Dimensionally inconsistent units are caught automatically:","position":{"start":{"line":98,"column":1},"end":{"line":98,"column":1}},"key":"flbWZKAlFu"}],"key":"xKxjpQzfie"},{"type":"code","lang":"python","value":"apples = xr.DataArray(10).pint.quantify(\"kg\")\noranges = xr.DataArray(200).pint.quantify(\"cm^3\")\n\napples + oranges","position":{"start":{"line":100,"column":1},"end":{"line":105,"column":1}},"key":"YJ2mhbvtGO"},{"type":"code","lang":"","value":"Out:\nDimensionalityError: Cannot convert from 'kilogram' ([mass]) to 'centimeter ** 3' ([length] ** 3)","position":{"start":{"line":107,"column":1},"end":{"line":110,"column":1}},"key":"sqwTgk7WrK"}],"key":"lyZXOE8qDQ"},{"type":"listItem","spread":true,"position":{"start":{"line":112,"column":1},"end":{"line":125,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"children":[{"type":"text","value":"Unit conversions become simple:","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"key":"osJkEtDlDp"}],"key":"g76GyjP3YR"},{"type":"code","lang":"python","value":"walk = xr.DataArray(500).pint.quantify('miles')\n\nwalk.pint.to('parsecs')","position":{"start":{"line":114,"column":1},"end":{"line":118,"column":1}},"key":"ZheKn7EGby"},{"type":"code","lang":"","value":"Out:\n<xarray.DataArray ()>\n<Quantity(2.6077643524162074e-11, 'parsec')>","position":{"start":{"line":120,"column":1},"end":{"line":124,"column":1}},"key":"CYBAIqoFMU"}],"key":"ZsNq1CGjE8"}],"key":"XT4jeuDB22"},{"type":"paragraph","position":{"start":{"line":126,"column":1},"end":{"line":127,"column":1}},"children":[{"type":"text","value":"With these features, you can build code that automatically propagates units and converts them where necessary to stay consistent.\nFor example, the problem of the NASA orbiter could have been prevented by explicitly converting to the correct units at the start","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"YSKBLBw9Xq"}],"key":"liSbFKEVoA"},{"type":"code","lang":"python","value":"def jpl_trajectory_code(impulse):\n\n    # Defensively check units first\n    impulse = impulse.pint.to(\"Newton * seconds\")\n\n    # This function we called here will only compute the correct result if supplied input in units of Newton-seconds,\n    # but that's fine because we already converted the values to be in the correct units!\n    propagated_position = some_rocket_science(impulse)\n\n    return propagated_position","position":{"start":{"line":129,"column":1},"end":{"line":140,"column":1}},"key":"UM5svsb7u3"},{"type":"paragraph","position":{"start":{"line":142,"column":1},"end":{"line":142,"column":1}},"children":[{"type":"text","value":"Note: We are adding ","position":{"start":{"line":142,"column":1},"end":{"line":142,"column":1}},"key":"r9emOmV3w3"},{"type":"link","url":"https://github.com/xarray-contrib/pint-xarray/pull/143","position":{"start":{"line":142,"column":1},"end":{"line":142,"column":1}},"children":[{"type":"text","value":"new features","position":{"start":{"line":142,"column":1},"end":{"line":142,"column":1}},"key":"uNXIfwYnak"}],"urlSource":"https://github.com/xarray-contrib/pint-xarray/pull/143","data":{"kind":"issue","org":"xarray-contrib","repo":"pint-xarray","issue_number":"143"},"internal":false,"protocol":"github","key":"PoEW8OvN5M"},{"type":"text","value":" to make specifying the units of parameters of existing library functions more slick.","position":{"start":{"line":142,"column":1},"end":{"line":142,"column":1}},"key":"dXQHEEyhVy"}],"key":"sMHUPKnxwI"},{"type":"paragraph","position":{"start":{"line":144,"column":1},"end":{"line":144,"column":1}},"children":[{"type":"text","value":"In the abstract, tracking units like this is useful in the same way that labelling dimensions with Xarray is useful: it helps us avoid errors by relieving us of the burden of remembering arbitrary information about our data.","position":{"start":{"line":144,"column":1},"end":{"line":144,"column":1}},"key":"IJm1WcwHXt"}],"key":"veHQug40BS"},{"type":"heading","depth":2,"position":{"start":{"line":146,"column":1},"end":{"line":146,"column":1}},"children":[{"type":"text","value":"Quantifying with pint-xarray","position":{"start":{"line":146,"column":1},"end":{"line":146,"column":1}},"key":"AyOFNEfEdU"}],"identifier":"quantifying-with-pint-xarray","label":"Quantifying with pint-xarray","html_id":"quantifying-with-pint-xarray","implicit":true,"key":"mdwgwHqC46"},{"type":"paragraph","position":{"start":{"line":148,"column":1},"end":{"line":149,"column":1}},"children":[{"type":"text","value":"The easiest way to create a unit-aware Xarray object is to use the helper package we made: ","position":{"start":{"line":148,"column":1},"end":{"line":148,"column":1}},"key":"WjlVbYimyc"},{"type":"link","url":"https://github.com/xarray-contrib/pint-xarray","position":{"start":{"line":148,"column":1},"end":{"line":148,"column":1}},"children":[{"type":"text","value":"pint-xarray","position":{"start":{"line":148,"column":1},"end":{"line":148,"column":1}},"key":"CGO32XC9jL"}],"urlSource":"https://github.com/xarray-contrib/pint-xarray","error":true,"key":"Yt0P2SMPQv"},{"type":"text","value":".\nOnce you ","position":{"start":{"line":148,"column":1},"end":{"line":148,"column":1}},"key":"Ayq8lFYwje"},{"type":"inlineCode","value":"import pint_xarray","position":{"start":{"line":148,"column":1},"end":{"line":148,"column":1}},"key":"avAfyZOeC5"},{"type":"text","value":" you can access unit-related functionality via ","position":{"start":{"line":148,"column":1},"end":{"line":148,"column":1}},"key":"ik7Nnn19TC"},{"type":"inlineCode","value":".pint","position":{"start":{"line":148,"column":1},"end":{"line":148,"column":1}},"key":"oSPEDJmwWT"},{"type":"text","value":" on any ","position":{"start":{"line":148,"column":1},"end":{"line":148,"column":1}},"key":"FNZMU4o0HF"},{"type":"inlineCode","value":"DataArray","position":{"start":{"line":148,"column":1},"end":{"line":148,"column":1}},"key":"xutrcTCVvz"},{"type":"text","value":" or ","position":{"start":{"line":148,"column":1},"end":{"line":148,"column":1}},"key":"Pbxd84cGzL"},{"type":"inlineCode","value":"Dataset","position":{"start":{"line":148,"column":1},"end":{"line":148,"column":1}},"key":"CIGUebfG9O"},{"type":"text","value":" (this works via ","position":{"start":{"line":148,"column":1},"end":{"line":148,"column":1}},"key":"r9nUz6ArHL"},{"type":"link","url":"https://xarray.pydata.org/en/stable/internals/extending-xarray.html","position":{"start":{"line":148,"column":1},"end":{"line":148,"column":1}},"children":[{"type":"text","value":"Xarray’s accessor interface","position":{"start":{"line":148,"column":1},"end":{"line":148,"column":1}},"key":"Pg9wPrvQUd"}],"urlSource":"https://xarray.pydata.org/en/stable/internals/extending-xarray.html","key":"hc1DWVw1Co"},{"type":"text","value":").","position":{"start":{"line":148,"column":1},"end":{"line":148,"column":1}},"key":"CzMCQAbItO"}],"key":"xGQN7Jf6Yv"},{"type":"paragraph","position":{"start":{"line":151,"column":1},"end":{"line":152,"column":1}},"children":[{"type":"text","value":"Above we have seen examples of quantifying explicitly, where we specify the units in the call to ","position":{"start":{"line":151,"column":1},"end":{"line":151,"column":1}},"key":"lIbVKnGlqj"},{"type":"inlineCode","value":".quantify()","position":{"start":{"line":151,"column":1},"end":{"line":151,"column":1}},"key":"r1wZTyg2ii"},{"type":"text","value":".\nWe can do this for multiple variables too, and we can also pass ","position":{"start":{"line":151,"column":1},"end":{"line":151,"column":1}},"key":"vhVzdH1VP3"},{"type":"inlineCode","value":"pint.Unit","position":{"start":{"line":151,"column":1},"end":{"line":151,"column":1}},"key":"NN1dFYtffY"},{"type":"text","value":" instances:","position":{"start":{"line":151,"column":1},"end":{"line":151,"column":1}},"key":"pIHgZn0jgh"}],"key":"jD5liKHGoN"},{"type":"code","lang":"python","value":"ds = xr.Dataset({'a': 2, 'b': 10})\n\nds.pint.quantify({'a': 'kg',\n                  'b': pint.Unit('moles')})","position":{"start":{"line":154,"column":1},"end":{"line":159,"column":1}},"key":"ZkqDxjoj1w"},{"type":"code","lang":"","value":"Out:\n<xarray.Dataset>\nDimensions:  ()\nData variables:\n    a        int64 [kg] 2\n    b        int64 [mol] 10","position":{"start":{"line":161,"column":1},"end":{"line":168,"column":1}},"key":"ekCWRARTNA"},{"type":"paragraph","position":{"start":{"line":170,"column":1},"end":{"line":171,"column":1}},"children":[{"type":"text","value":"Alternatively, we can quantify from the object’s ","position":{"start":{"line":170,"column":1},"end":{"line":170,"column":1}},"key":"wk7lcooJFy"},{"type":"inlineCode","value":".attrs","position":{"start":{"line":170,"column":1},"end":{"line":170,"column":1}},"key":"NiroPTUM1X"},{"type":"text","value":", automatically reading the metadata which xarray objects carry around.\nIf nothing is passed to ","position":{"start":{"line":170,"column":1},"end":{"line":170,"column":1}},"key":"slFiO6zLTT"},{"type":"inlineCode","value":".quantify()","position":{"start":{"line":170,"column":1},"end":{"line":170,"column":1}},"key":"RSgQGqozfw"},{"type":"text","value":", it will attempt to parse the ","position":{"start":{"line":170,"column":1},"end":{"line":170,"column":1}},"key":"IUWxPf9lKz"},{"type":"inlineCode","value":".attrs['units']","position":{"start":{"line":170,"column":1},"end":{"line":170,"column":1}},"key":"xjg1C5KL7q"},{"type":"text","value":" entry for each data variable.","position":{"start":{"line":170,"column":1},"end":{"line":170,"column":1}},"key":"KHBSaApHZm"}],"key":"hOKjo7ARLm"},{"type":"paragraph","position":{"start":{"line":173,"column":1},"end":{"line":173,"column":1}},"children":[{"type":"text","value":"This means that for scientific datasets which are stored as files with units in their attributes (which netCDF and Zarr can do for example), using Pint with Xarray becomes as simple as:","position":{"start":{"line":173,"column":1},"end":{"line":173,"column":1}},"key":"bY4oIAG9Yj"}],"key":"NCUyWpoV40"},{"type":"code","lang":"python","value":"import pint_xarray\n\nds = open_dataset(filepath).pint.quantify()","position":{"start":{"line":175,"column":1},"end":{"line":179,"column":1}},"key":"wxGSPce4Xs"},{"type":"heading","depth":2,"position":{"start":{"line":181,"column":1},"end":{"line":181,"column":1}},"children":[{"type":"text","value":"Dequantifying","position":{"start":{"line":181,"column":1},"end":{"line":181,"column":1}},"key":"MehGQkLGYZ"}],"identifier":"dequantifying","label":"Dequantifying","html_id":"dequantifying","implicit":true,"key":"cc1pHbYsPY"},{"type":"paragraph","position":{"start":{"line":183,"column":1},"end":{"line":185,"column":1}},"children":[{"type":"text","value":"To convert our pint arrays back into NumPy arrays, we can use ","position":{"start":{"line":183,"column":1},"end":{"line":183,"column":1}},"key":"ktcaYxaKaW"},{"type":"inlineCode","value":".dequantify","position":{"start":{"line":183,"column":1},"end":{"line":183,"column":1}},"key":"lKfhxahUeJ"},{"type":"text","value":".\nThis will strip the units from the arrays and replace them into the ","position":{"start":{"line":183,"column":1},"end":{"line":183,"column":1}},"key":"uNU5STjBes"},{"type":"inlineCode","value":".attrs['units']","position":{"start":{"line":183,"column":1},"end":{"line":183,"column":1}},"key":"GGZkEWBcRU"},{"type":"text","value":" of each variable.\nThis is useful when we want to save our data back to a file, as it means that the current units will be preserved in the attributes of a netCDF file (or Zarr store etc.), as long as we just do ","position":{"start":{"line":183,"column":1},"end":{"line":183,"column":1}},"key":"tj7P23J98o"},{"type":"inlineCode","value":"ds.pint.dequantify().to_netcdf(...)","position":{"start":{"line":183,"column":1},"end":{"line":183,"column":1}},"key":"c7BspcPWPS"},{"type":"text","value":".","position":{"start":{"line":183,"column":1},"end":{"line":183,"column":1}},"key":"otGlKe7UIZ"}],"key":"DIY4RIP5d1"},{"type":"heading","depth":2,"position":{"start":{"line":187,"column":1},"end":{"line":187,"column":1}},"children":[{"type":"text","value":"Dask integration","position":{"start":{"line":187,"column":1},"end":{"line":187,"column":1}},"key":"i7YHtZe2N5"}],"identifier":"dask-integration","label":"Dask integration","html_id":"dask-integration","implicit":true,"key":"hA8AJPUXsj"},{"type":"paragraph","position":{"start":{"line":189,"column":1},"end":{"line":189,"column":1}},"children":[{"type":"text","value":"So Xarray can wrap Dask arrays, and now it can wrap Pint quantities… Can we use both together? Yes!","position":{"start":{"line":189,"column":1},"end":{"line":189,"column":1}},"key":"sLTr6VOFrj"}],"key":"TpHATkFRsM"},{"type":"paragraph","position":{"start":{"line":191,"column":1},"end":{"line":193,"column":1}},"children":[{"type":"text","value":"You can get a unit-aware, Dask-backed array either by ","position":{"start":{"line":191,"column":1},"end":{"line":191,"column":1}},"key":"kEKr5S0wHh"},{"type":"inlineCode","value":".pint.quantify()","position":{"start":{"line":191,"column":1},"end":{"line":191,"column":1}},"key":"yDqoc8J0fN"},{"type":"text","value":"-ing a chunked array, or you can ","position":{"start":{"line":191,"column":1},"end":{"line":191,"column":1}},"key":"JO9IXR00aE"},{"type":"inlineCode","value":".pint.chunk()","position":{"start":{"line":191,"column":1},"end":{"line":191,"column":1}},"key":"k7e9ONAm7S"},{"type":"text","value":" a quantified array.\n(If you have Dask installed, then ","position":{"start":{"line":191,"column":1},"end":{"line":191,"column":1}},"key":"l63YpVl9SG"},{"type":"inlineCode","value":"open_dataset(f, chunks={}).pint.quantify()","position":{"start":{"line":191,"column":1},"end":{"line":191,"column":1}},"key":"g0noh0uVDR"},{"type":"text","value":" will already give you a Dask-backed, quantified array.)\nFrom there you can ","position":{"start":{"line":191,"column":1},"end":{"line":191,"column":1}},"key":"ItSmlWtff7"},{"type":"inlineCode","value":".compute()","position":{"start":{"line":191,"column":1},"end":{"line":191,"column":1}},"key":"Q3govFQ3OC"},{"type":"text","value":" the Dask-backed objects as normal, and the units will be retained.","position":{"start":{"line":191,"column":1},"end":{"line":191,"column":1}},"key":"KxFS0qJr7h"}],"key":"FifPLFfh4e"},{"type":"paragraph","position":{"start":{"line":195,"column":1},"end":{"line":196,"column":1}},"children":[{"type":"text","value":"(Under the hood we now have an ","position":{"start":{"line":195,"column":1},"end":{"line":195,"column":1}},"key":"I25aAwFtPg"},{"type":"inlineCode","value":"xarray.DataArray","position":{"start":{"line":195,"column":1},"end":{"line":195,"column":1}},"key":"OwBgIHnbUD"},{"type":"text","value":" wrapping a ","position":{"start":{"line":195,"column":1},"end":{"line":195,"column":1}},"key":"XyJhYSb0gT"},{"type":"inlineCode","value":"pint.Quantity","position":{"start":{"line":195,"column":1},"end":{"line":195,"column":1}},"key":"eU6etEPyYo"},{"type":"text","value":", which wraps a ","position":{"start":{"line":195,"column":1},"end":{"line":195,"column":1}},"key":"lsq1RMTOOl"},{"type":"inlineCode","value":"dask.array.Array","position":{"start":{"line":195,"column":1},"end":{"line":195,"column":1}},"key":"nqkmMIFPVK"},{"type":"text","value":", which wraps a ","position":{"start":{"line":195,"column":1},"end":{"line":195,"column":1}},"key":"LioSsIRi1m"},{"type":"inlineCode","value":"numpy.ndarray","position":{"start":{"line":195,"column":1},"end":{"line":195,"column":1}},"key":"up617Xcabo"},{"type":"text","value":".\nThis “multi-nested duck array” approach can be generalised to include other array libraries (e.g. ","position":{"start":{"line":195,"column":1},"end":{"line":195,"column":1}},"key":"MBf3Iq54Fz"},{"type":"inlineCode","value":"scipy.sparse","position":{"start":{"line":195,"column":1},"end":{"line":195,"column":1}},"key":"MCX1b2T77V"},{"type":"text","value":"), but requires ","position":{"start":{"line":195,"column":1},"end":{"line":195,"column":1}},"key":"tKpJQ9T4oo"},{"type":"link","url":"https://github.com/pydata/duck-array-discussion","position":{"start":{"line":195,"column":1},"end":{"line":195,"column":1}},"children":[{"type":"text","value":"coordination","position":{"start":{"line":195,"column":1},"end":{"line":195,"column":1}},"key":"VlAIVvcLMJ"}],"urlSource":"https://github.com/pydata/duck-array-discussion","error":true,"key":"K29gkGvLNI"},{"type":"text","value":" between the maintainers of the libraries involved.)","position":{"start":{"line":195,"column":1},"end":{"line":195,"column":1}},"key":"pDlBpSLvCI"}],"key":"ssu48CuY0s"},{"type":"heading","depth":2,"position":{"start":{"line":198,"column":1},"end":{"line":198,"column":1}},"children":[{"type":"text","value":"Unit-aware indexes","position":{"start":{"line":198,"column":1},"end":{"line":198,"column":1}},"key":"Dw5h0EkzO8"}],"identifier":"unit-aware-indexes","label":"Unit-aware indexes","html_id":"unit-aware-indexes","implicit":true,"key":"rioHxJI9j7"},{"type":"paragraph","position":{"start":{"line":200,"column":1},"end":{"line":200,"column":1}},"children":[{"type":"text","value":"We would love to be able to promote Xarray indexes to Pint Quantities, as that would allow you to select data subsets in a unit-aware manner like:","position":{"start":{"line":200,"column":1},"end":{"line":200,"column":1}},"key":"fCY6r93UOi"}],"key":"AJ6XCYIUwL"},{"type":"code","lang":"python","value":"da = xr.DataArray(name='a', data=[0, 1, 2], dims='x', coords={'x': [1000, 2000, 3000]})\nda = da.pint.quantify({'a': 'Pa', 'x': 'm'})\n\nda.pint.sel(x=2 * 'km')","position":{"start":{"line":202,"column":1},"end":{"line":207,"column":1}},"key":"uigzfr5pni"},{"type":"paragraph","position":{"start":{"line":209,"column":1},"end":{"line":209,"column":1}},"children":[{"type":"text","value":"Unfortunately this will not possible until the ongoing work to extend Xarray to support ","position":{"start":{"line":209,"column":1},"end":{"line":209,"column":1}},"key":"hxh9z2wCN4"},{"type":"link","url":"https://github.com/pydata/xarray/issues/1603","position":{"start":{"line":209,"column":1},"end":{"line":209,"column":1}},"children":[{"type":"text","value":"explicit indexes","position":{"start":{"line":209,"column":1},"end":{"line":209,"column":1}},"key":"OYRahDdRFc"}],"urlSource":"https://github.com/pydata/xarray/issues/1603","data":{"kind":"issue","org":"pydata","repo":"xarray","issue_number":"1603"},"internal":false,"protocol":"github","key":"f7soJndrU3"},{"type":"text","value":" is complete.","position":{"start":{"line":209,"column":1},"end":{"line":209,"column":1}},"key":"XFsN2y6WhH"}],"key":"jBhhCNwM7O"},{"type":"paragraph","position":{"start":{"line":211,"column":1},"end":{"line":211,"column":1}},"children":[{"type":"text","value":"In the meantime pint-xarray offers a workaround. If you tell ","position":{"start":{"line":211,"column":1},"end":{"line":211,"column":1}},"key":"uf91MEzW9x"},{"type":"inlineCode","value":".quantify","position":{"start":{"line":211,"column":1},"end":{"line":211,"column":1}},"key":"hKIeHSI1OR"},{"type":"text","value":" the units you wish an index to have, it will store those in ","position":{"start":{"line":211,"column":1},"end":{"line":211,"column":1}},"key":"pbmB5JA5wh"},{"type":"inlineCode","value":".attrs[\"units\"]","position":{"start":{"line":211,"column":1},"end":{"line":211,"column":1}},"key":"c98ZSLJuWE"},{"type":"text","value":" instead.","position":{"start":{"line":211,"column":1},"end":{"line":211,"column":1}},"key":"R2jxZPDmxF"}],"key":"MnpgBfgTiq"},{"type":"code","lang":"python","value":"time = xr.DataArray([0.1, 0.2, 0.3], dims='time')\ndistance = xr.DataArray(name='distance',\n                        data=[10, 20, 25],\n                        dims=['time'],\n                        coords={'time': time})\ndistance = distance.pint.quantify({'distance': 'metres',\n                                   'time': 'seconds'})\nprint(distance.coords['time'].attrs)","position":{"start":{"line":213,"column":1},"end":{"line":222,"column":1}},"key":"o1sjmem7IV"},{"type":"code","lang":"","value":"Out:\n{'units': <Unit('second')>}","position":{"start":{"line":224,"column":1},"end":{"line":227,"column":1}},"key":"KRt08mB6mS"},{"type":"paragraph","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"children":[{"type":"text","value":"This allows us to provide conveniently wrapped versions of common xarray methods like ","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"key":"psSHqEuzJ7"},{"type":"inlineCode","value":".sel","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"key":"vhgMOabun1"},{"type":"text","value":", so that you can still select subsets of data in a unit-aware fashion like this:","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"key":"hMVg0ftwoJ"}],"key":"oSvooaI4iB"},{"type":"code","lang":"python","value":"distance.pint.sel(time=200 * pint.Unit('milliseconds'))","position":{"start":{"line":231,"column":1},"end":{"line":233,"column":1}},"key":"M7B1GCerhu"},{"type":"code","lang":"","value":"Out:\n<xarray.DataArray 'distance' ()>\n<Quantity(20, 'meter')>\nCoordinates:\n    time     float64 200.0","position":{"start":{"line":235,"column":1},"end":{"line":241,"column":1}},"key":"riJ8pelvus"},{"type":"paragraph","position":{"start":{"line":243,"column":1},"end":{"line":243,"column":1}},"children":[{"type":"text","value":"Observe how the ","position":{"start":{"line":243,"column":1},"end":{"line":243,"column":1}},"key":"BdOHyZw02z"},{"type":"inlineCode","value":".pint.sel","position":{"start":{"line":243,"column":1},"end":{"line":243,"column":1}},"key":"cert1L56Mw"},{"type":"text","value":" operation has first converted 200 milliseconds to 0.2 seconds, before finding the distance value that occurs at a time position of 0.2 seconds.","position":{"start":{"line":243,"column":1},"end":{"line":243,"column":1}},"key":"TDxMBedTQT"}],"key":"mpKVgSCXP7"},{"type":"paragraph","position":{"start":{"line":245,"column":1},"end":{"line":245,"column":1}},"children":[{"type":"link","url":"https://xarray.pydata.org/en/stable/user-guide/duckarrays.html#missing-features","position":{"start":{"line":245,"column":1},"end":{"line":245,"column":1}},"children":[{"type":"text","value":"This wrapping is currently necessary","position":{"start":{"line":245,"column":1},"end":{"line":245,"column":1}},"key":"RWVYN3ohWZ"}],"urlSource":"https://xarray.pydata.org/en/stable/user-guide/duckarrays.html#missing-features","key":"BdhJtpNnAW"},{"type":"text","value":" for any operation which needs to be aware of the units of a dimension coordinate of the dataarray, or any xarray operation which relies on an external library (such as calling ","position":{"start":{"line":245,"column":1},"end":{"line":245,"column":1}},"key":"j0o6u8qRrm"},{"type":"inlineCode","value":"scipy","position":{"start":{"line":245,"column":1},"end":{"line":245,"column":1}},"key":"BBxxdf5hxZ"},{"type":"text","value":" in ","position":{"start":{"line":245,"column":1},"end":{"line":245,"column":1}},"key":"AxmXOhmGjA"},{"type":"inlineCode","value":".integrate","position":{"start":{"line":245,"column":1},"end":{"line":245,"column":1}},"key":"f0IGlPQV29"},{"type":"text","value":").","position":{"start":{"line":245,"column":1},"end":{"line":245,"column":1}},"key":"EOc34ANv6Z"}],"key":"FDEl4I2gZT"},{"type":"heading","depth":2,"position":{"start":{"line":247,"column":1},"end":{"line":247,"column":1}},"children":[{"type":"text","value":"CF-compliant units for geosciences with cf-xarray","position":{"start":{"line":247,"column":1},"end":{"line":247,"column":1}},"key":"uzOECZFpDd"}],"identifier":"cf-compliant-units-for-geosciences-with-cf-xarray","label":"CF-compliant units for geosciences with cf-xarray","html_id":"cf-compliant-units-for-geosciences-with-cf-xarray","implicit":true,"key":"RcLCpHEdZG"},{"type":"paragraph","position":{"start":{"line":249,"column":1},"end":{"line":251,"column":1}},"children":[{"type":"text","value":"Different fields tend to have different niche conventions about how certain units are defined.\nBy default, Pint doesn’t understand all the unusual units and conventions we use in geosciences.\nBut ","position":{"start":{"line":249,"column":1},"end":{"line":249,"column":1}},"key":"DrtUILqBHy"},{"type":"link","url":"https://pint.readthedocs.io/en/stable/defining.html","position":{"start":{"line":249,"column":1},"end":{"line":249,"column":1}},"children":[{"type":"text","value":"Pint is customisable","position":{"start":{"line":249,"column":1},"end":{"line":249,"column":1}},"key":"nej9dEyuNd"}],"urlSource":"https://pint.readthedocs.io/en/stable/defining.html","key":"bKTLqcoLWp"},{"type":"text","value":", and with the help of ","position":{"start":{"line":249,"column":1},"end":{"line":249,"column":1}},"key":"w97nrxnOxA"},{"type":"link","url":"https://github.com/xarray-contrib/cf-xarray","position":{"start":{"line":249,"column":1},"end":{"line":249,"column":1}},"children":[{"type":"text","value":"cf-xarray","position":{"start":{"line":249,"column":1},"end":{"line":249,"column":1}},"key":"fQipc3SCNH"}],"urlSource":"https://github.com/xarray-contrib/cf-xarray","error":true,"key":"uIuuNgLebJ"},{"type":"text","value":" we can teach it about these geoscience-specific units.","position":{"start":{"line":249,"column":1},"end":{"line":249,"column":1}},"key":"fZIEgjI8xT"}],"key":"AgVpsIw4rR"},{"type":"paragraph","position":{"start":{"line":253,"column":1},"end":{"line":253,"column":1}},"children":[{"type":"text","value":"If we ","position":{"start":{"line":253,"column":1},"end":{"line":253,"column":1}},"key":"wG0pLkFsvd"},{"type":"inlineCode","value":"import cf_xarray.units","position":{"start":{"line":253,"column":1},"end":{"line":253,"column":1}},"key":"PuDDBraEe7"},{"type":"text","value":" (before ","position":{"start":{"line":253,"column":1},"end":{"line":253,"column":1}},"key":"YST3LXiGRd"},{"type":"inlineCode","value":"import pint_xarray","position":{"start":{"line":253,"column":1},"end":{"line":253,"column":1}},"key":"h8gQIsAIrG"},{"type":"text","value":") then we can ","position":{"start":{"line":253,"column":1},"end":{"line":253,"column":1}},"key":"oxTW3C07DJ"},{"type":"inlineCode","value":"quantify","position":{"start":{"line":253,"column":1},"end":{"line":253,"column":1}},"key":"mWpfym5otY"},{"type":"text","value":" example climate data from the ","position":{"start":{"line":253,"column":1},"end":{"line":253,"column":1}},"key":"YH9Ao2CKIq"},{"type":"link","url":"https://pangeo-data.github.io/pangeo-cmip6-cloud/","position":{"start":{"line":253,"column":1},"end":{"line":253,"column":1}},"children":[{"type":"text","value":"Pangeo Project’s CMIP6 catalog","position":{"start":{"line":253,"column":1},"end":{"line":253,"column":1}},"key":"N5eWsmg8bf"}],"urlSource":"https://pangeo-data.github.io/pangeo-cmip6-cloud/","key":"bxciWuZ6Pk"},{"type":"text","value":":","position":{"start":{"line":253,"column":1},"end":{"line":253,"column":1}},"key":"RtPm60N3Kz"}],"key":"Ij6oEuGVlC"},{"type":"code","lang":"python","value":"import xarray as xr\nimport cf_xarray.units\nimport pint_xarray\n\nds = xr.open_dataset('gs://cmip6/CMIP6/CMIP/NCAR/CESM2-FV2/historical/r2i1p1f1/Amon/sfcWind/gn/v20200226/', engine='zarr')\nds = ds.pint.quantify()\n\nsquared_wind = ds['sfcWind'] ** 2\nsquared_wind.pint.units","position":{"start":{"line":255,"column":1},"end":{"line":265,"column":1}},"key":"g2929gQXVN"},{"type":"code","lang":"","value":"Out:\n<Unit('meter ** 2 / second ** 2')>","position":{"start":{"line":267,"column":1},"end":{"line":270,"column":1}},"key":"lJH66RS6C2"},{"type":"paragraph","position":{"start":{"line":272,"column":1},"end":{"line":272,"column":1}},"children":[{"type":"text","value":"Here (thanks to ","position":{"start":{"line":272,"column":1},"end":{"line":272,"column":1}},"key":"S3NxOavyss"},{"type":"inlineCode","value":"cf_xarray","position":{"start":{"line":272,"column":1},"end":{"line":272,"column":1}},"key":"t8PATQLYfb"},{"type":"text","value":") pint has successfully interpreted the CF-style units ","position":{"start":{"line":272,"column":1},"end":{"line":272,"column":1}},"key":"jn83DeHf47"},{"type":"inlineCode","value":"'m s-1'","position":{"start":{"line":272,"column":1},"end":{"line":272,"column":1}},"key":"v9IiNP5Uho"},{"type":"text","value":", then automatically changed them when we squared the wind speed.","position":{"start":{"line":272,"column":1},"end":{"line":272,"column":1}},"key":"Fv7JkKePUM"}],"key":"dkeSB1wEyx"},{"type":"heading","depth":2,"position":{"start":{"line":274,"column":1},"end":{"line":274,"column":1}},"children":[{"type":"text","value":"Plotting","position":{"start":{"line":274,"column":1},"end":{"line":274,"column":1}},"key":"g00uuc5YhT"}],"identifier":"plotting","label":"Plotting","html_id":"plotting","implicit":true,"key":"N4BebBWup0"},{"type":"paragraph","position":{"start":{"line":276,"column":1},"end":{"line":276,"column":1}},"children":[{"type":"text","value":"We can complete our real-world example by plotting the data in its new units:","position":{"start":{"line":276,"column":1},"end":{"line":276,"column":1}},"key":"CL5D2YScjq"}],"key":"tS1UH63lou"},{"type":"code","lang":"python","value":"import cartopy.crs as ccrs\nimport matplotlib.pyplot as plt\n\np = squared_wind.isel(time=\"2014-01\").plot(\n    subplot_kws=dict(projection=ccrs.Orthographic(-80, 35), facecolor=\"gray\"),\n    transform=ccrs.PlateCarree(),\n)\np.axes.set_global()\np.axes.coastlines()\nplt.show()","position":{"start":{"line":278,"column":1},"end":{"line":289,"column":1}},"key":"rEXTVWwKm1"},{"type":"image","url":"/build/squared_wind-1da222802a48a2daa9fe78238303300a.png","alt":"cartopy plot of a quantified dataset","position":{"start":{"line":291,"column":1},"end":{"line":291,"column":1}},"key":"zaqWFa03fp","urlSource":"/images/squared_wind.png"},{"type":"paragraph","position":{"start":{"line":293,"column":1},"end":{"line":293,"column":1}},"children":[{"type":"text","value":"where ","position":{"start":{"line":293,"column":1},"end":{"line":293,"column":1}},"key":"sWMSy6LwKu"},{"type":"inlineCode","value":"xarray.plot","position":{"start":{"line":293,"column":1},"end":{"line":293,"column":1}},"key":"BzE8AXAiA1"},{"type":"text","value":" has detected the Pint units automatically.","position":{"start":{"line":293,"column":1},"end":{"line":293,"column":1}},"key":"yaOZukubvx"}],"key":"RIopINWgHM"},{"type":"heading","depth":2,"position":{"start":{"line":295,"column":1},"end":{"line":295,"column":1}},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":295,"column":1},"end":{"line":295,"column":1}},"key":"Hh7bWHbxJJ"}],"identifier":"conclusion","label":"Conclusion","html_id":"conclusion","implicit":true,"key":"tIJ8uKs936"},{"type":"paragraph","position":{"start":{"line":297,"column":1},"end":{"line":297,"column":1}},"children":[{"type":"text","value":"Please have a go! You will need xarray (v2022.03.0+), pint (0.18+), and pint-xarray (0.3+).","position":{"start":{"line":297,"column":1},"end":{"line":297,"column":1}},"key":"AXgHjwCZWd"}],"key":"sa0ooKKhP3"},{"type":"paragraph","position":{"start":{"line":299,"column":1},"end":{"line":300,"column":1}},"children":[{"type":"text","value":"Please also tell us about any bugs you find, or documentation suggestions you have on the ","position":{"start":{"line":299,"column":1},"end":{"line":299,"column":1}},"key":"QtowDL4PrA"},{"type":"link","url":"https://github.com/pydata/xarray/issues","position":{"start":{"line":299,"column":1},"end":{"line":299,"column":1}},"children":[{"type":"text","value":"Xarray","position":{"start":{"line":299,"column":1},"end":{"line":299,"column":1}},"key":"OhX1BHxROc"}],"urlSource":"https://github.com/pydata/xarray/issues","error":true,"key":"lDdxI5PN48"},{"type":"text","value":" or ","position":{"start":{"line":299,"column":1},"end":{"line":299,"column":1}},"key":"DLIj1xawyt"},{"type":"link","url":"https://github.com/xarray-contrib/pint-xarray/issues","position":{"start":{"line":299,"column":1},"end":{"line":299,"column":1}},"children":[{"type":"text","value":"pint-xarray issue trackers","position":{"start":{"line":299,"column":1},"end":{"line":299,"column":1}},"key":"CPsgiTpVEY"}],"urlSource":"https://github.com/xarray-contrib/pint-xarray/issues","error":true,"key":"Y0yiDdBeaY"},{"type":"text","value":".\nIf you have usage questions you can raise them there, on the ","position":{"start":{"line":299,"column":1},"end":{"line":299,"column":1}},"key":"gxevQ55mBU"},{"type":"link","url":"https://github.com/pydata/xarray/discussions","position":{"start":{"line":299,"column":1},"end":{"line":299,"column":1}},"children":[{"type":"text","value":"Xarray discussions page","position":{"start":{"line":299,"column":1},"end":{"line":299,"column":1}},"key":"sFlMd9As7T"}],"urlSource":"https://github.com/pydata/xarray/discussions","error":true,"key":"UFTIBJenRv"},{"type":"text","value":", or on the ","position":{"start":{"line":299,"column":1},"end":{"line":299,"column":1}},"key":"lw5aG1K79Q"},{"type":"link","url":"https://discourse.pangeo.io/","position":{"start":{"line":299,"column":1},"end":{"line":299,"column":1}},"children":[{"type":"text","value":"Pangeo Discourse forum","position":{"start":{"line":299,"column":1},"end":{"line":299,"column":1}},"key":"nTnediVG1r"}],"urlSource":"https://discourse.pangeo.io/","key":"VAEz88Ye1G"},{"type":"text","value":".","position":{"start":{"line":299,"column":1},"end":{"line":299,"column":1}},"key":"ohGsenHtsa"}],"key":"XddyBNDwYg"},{"type":"paragraph","position":{"start":{"line":302,"column":1},"end":{"line":303,"column":1}},"children":[{"type":"text","value":"The work here to allow Xarray to wrap Pint objects is part of a ","position":{"start":{"line":302,"column":1},"end":{"line":302,"column":1}},"key":"yKaDW7mzYI"},{"type":"link","url":"http://xarray.pydata.org/en/stable/roadmap.html#flexible-arrays","position":{"start":{"line":302,"column":1},"end":{"line":302,"column":1}},"children":[{"type":"text","value":"broader effort to generalise Xarray","position":{"start":{"line":302,"column":1},"end":{"line":302,"column":1}},"key":"FWdOHcV9nK"}],"urlSource":"http://xarray.pydata.org/en/stable/roadmap.html#flexible-arrays","key":"wHkbVZ5g4u"},{"type":"text","value":" to handle a wide variety of data types (so-called “duck array wrapping”).\nAlong with the incoming ","position":{"start":{"line":302,"column":1},"end":{"line":302,"column":1}},"key":"TjiyFaNt20"},{"type":"link","url":"http://xarray.pydata.org/en/stable/roadmap.html#flexible-indexes","position":{"start":{"line":302,"column":1},"end":{"line":302,"column":1}},"children":[{"type":"text","value":"support for flexible indexes","position":{"start":{"line":302,"column":1},"end":{"line":302,"column":1}},"key":"xh2oaCytBm"}],"urlSource":"http://xarray.pydata.org/en/stable/roadmap.html#flexible-indexes","key":"FqoSJcnlZb"},{"type":"text","value":", we are excited for all the new features that this will enable for Xarray users!","position":{"start":{"line":302,"column":1},"end":{"line":302,"column":1}},"key":"Qk6kRMWn0f"}],"key":"UICXnY1kzG"}],"key":"mZQCVhGDYc"}],"key":"B6STj4coYu"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Easy IPCC part 1: Multi-Model Datatree","url":"/blog/2022/easy-ipcc-datatree","group":"2022"},"next":{"title":"Coronavirus: The Simplest Model","url":"/blog/2020/covid19-model","group":"2020"}}},"domain":"http://localhost:3000"}